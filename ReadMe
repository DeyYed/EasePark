# EasePark Online

EasePark Online is a web-based parking management system designed to streamline and enhance the parking experience for users and administrators. This project was developed as a collaborative group effort, and I contributed as one of the programmers.

## Overview

EasePark Online provides a comprehensive solution for managing parking spaces, user accounts, and administrative tasks. The system includes features such as user registration, parking status monitoring, parking logs, and administrative dashboards. It is designed to be user-friendly, efficient, and secure.

## Features

### User Features
- **Registration and Login**: Users can register and log in to access their accounts.
- **Parking Status**: Real-time updates on parking slot availability.
- **Verification**: Email and code-based verification for secure access.
- **Change Password**: Users can reset or change their passwords securely.

### Admin Features
- **Dashboard**: A centralized dashboard for managing parking operations.
- **RFID Account Management**: Manage user RFID accounts for automated parking access.
- **Parking Logs**: View and search detailed logs of parking activities.
- **Parking Status**: Monitor the status of parking slots in real-time.
- **User Management**: Block or unblock users and update user details.
- **Email Management**: Admins can change their email addresses securely.

### Security Features
- **Session Management**: Secure session handling to prevent unauthorized access.
- **Input Validation**: Sanitization and validation of user inputs to prevent SQL injection and XSS attacks.
- **Verification Codes**: Unique verification codes for sensitive operations like password resets.

## Technologies Used

- **Frontend**: HTML, CSS, JavaScript, SweetAlert2 for interactive alerts.
- **Backend**: PHP for server-side logic.
- **Hardware**: Microcontrollers.
- **Database**: MySQL for data storage and management.
- **Libraries**: PHPMailer for email functionality.
- **Version Control**: Git for collaborative development.
## Arduino Implementation

The EasePark Online system integrates with hardware components using an ESP32 microcontroller to manage parking operations effectively. Below is an overview of the Arduino implementation:

### Hardware Components
- **ESP32 Microcontroller**: Handles communication between the hardware and the web application.
- **RFID Reader**: Used for user authentication and automated parking access.
- **Ultrasonic Sensors**: Detect the availability of parking slots.
- **Buzzer**: Alerts users that their presence has been detected and the parking slot status is being updated.
- **Relay Module**: Controls barriers or gates for parking entry and exit.
- **Powerbank**: Provides power to the microcontroller and sensors.

### Features Implemented
1. **Real-Time Parking Slot Monitoring**:
    - Ultrasonic sensors detect the presence of vehicles in parking slots.
    - Data is sent to the ESP32, which communicates with the web application to update the parking status.

2. **RFID-Based Access**:
    - Users scan their RFID cards at the parking entrance.
    - The ESP32 verifies the RFID data with the database and triggers the relay module to open the barrier if access is granted.

3. **Data Communication**:
    - The ESP32 uses Wi-Fi to send sensor data and receive commands from the web application.
    - HTTP requests or MQTT protocols are used for seamless communication.



### Integration with the Web Application
- The ESP32 sends parking slot data to the web application via HTTP POST requests.
- The web application processes the data and updates the parking status in the database.
- Admins and users can view the real-time status on their respective dashboards.

### Challenges and Solutions
- **Wi-Fi Connectivity**: Ensured stable connectivity by implementing reconnection logic in the ESP32 code.
- **Sensor Accuracy**: Calibrated ultrasonic sensors to minimize false readings.
- **Data Synchronization**: Used timestamps to handle data consistency between the hardware and the web application.

This implementation bridges the gap between hardware and software, providing a seamless parking management experience.

## Project Structure

The project is organized into the following directories:

  - **admin**: Admin-specific pages and functionalities.
  - **user**: User-specific pages and functionalities.
  - **verification**: Verification-related pages.
  - **shenanigans**: Experimental or additional features.
  - **park**: Parking-related data and status management.
- **css**: Stylesheets for the website.
- **phpmailer**: PHPMailer library for email handling.

## How It Works

1. **User Registration**: Users register by providing their email and other details. A verification code is sent to their email for confirmation.
2. **Login**: Users log in using their credentials. Admins have a separate login interface.
3. **Parking Status**: Users can view the availability of parking slots in real-time.
4. **Parking Logs**: Admins can access detailed logs of parking activities, including timestamps, user details, and parking slot information.
5. **Admin Dashboard**: Admins can manage users, view logs, and monitor parking status from the dashboard.
6. **Security**: All sensitive operations are protected with verification codes and secure session handling.

## My Contribution

As one of the programmers, I contributed to the following aspects of the project:

- Established the connection between the website and Arduino devices.
- Developed the parking status and parking logs on the admin side, ensuring all necessary details are displayed.
- Created the parking status functionality on the user side.
- Designed and implemented the logic for calculating the number of cars displayed on the dashboard.
- Collaborated with the hardware team to integrate the hardware with the website.
- Developed the logic for managing parking logs and parking status effectively.

## How to Run the Project

1. Clone the repository to your local machine.
2. Set up a MySQL database and import the provided database schema.
3. Update the `connection.php` file with your database credentials.
4. Host the project on a local or remote server (e.g., XAMPP, WAMP, or a web hosting service).
5. Access the website through your browser.



## Acknowledgments

This project was a group effort, and I would like to thank my teammates for their collaboration and support. Together, we aimed to create a robust and user-friendly parking management system.

## License

This project is for educational purposes and is not intended for commercial use.
